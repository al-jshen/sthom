
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 65> locations_array__ = 
{" (found before start of program)",
 " (in '/home/js/programs/sthom/model.stan', line 30, column 2 to column 27)",
 " (in '/home/js/programs/sthom/model.stan', line 31, column 2 to column 36)",
 " (in '/home/js/programs/sthom/model.stan', line 32, column 2 to column 48)",
 " (in '/home/js/programs/sthom/model.stan', line 34, column 2 to column 23)",
 " (in '/home/js/programs/sthom/model.stan', line 35, column 2 to column 23)",
 " (in '/home/js/programs/sthom/model.stan', line 37, column 2 to column 14)",
 " (in '/home/js/programs/sthom/model.stan', line 41, column 2 to column 75)",
 " (in '/home/js/programs/sthom/model.stan', line 42, column 2 to column 17)",
 " (in '/home/js/programs/sthom/model.stan', line 43, column 2 to column 32)",
 " (in '/home/js/programs/sthom/model.stan', line 46, column 4 to column 54)",
 " (in '/home/js/programs/sthom/model.stan', line 45, column 2 to line 47, column 3)",
 " (in '/home/js/programs/sthom/model.stan', line 51, column 6 to column 121)",
 " (in '/home/js/programs/sthom/model.stan', line 52, column 6 to column 26)",
 " (in '/home/js/programs/sthom/model.stan', line 50, column 19 to line 53, column 5)",
 " (in '/home/js/programs/sthom/model.stan', line 50, column 4 to line 53, column 5)",
 " (in '/home/js/programs/sthom/model.stan', line 49, column 2 to line 54, column 3)",
 " (in '/home/js/programs/sthom/model.stan', line 61, column 4 to column 30)",
 " (in '/home/js/programs/sthom/model.stan', line 62, column 4 to column 28)",
 " (in '/home/js/programs/sthom/model.stan', line 64, column 4 to column 30)",
 " (in '/home/js/programs/sthom/model.stan', line 65, column 4 to column 27)",
 " (in '/home/js/programs/sthom/model.stan', line 67, column 4 to column 31)",
 " (in '/home/js/programs/sthom/model.stan', line 69, column 4 to column 37)",
 " (in '/home/js/programs/sthom/model.stan', line 59, column 2 to line 70, column 3)",
 " (in '/home/js/programs/sthom/model.stan', line 74, column 6 to column 68)",
 " (in '/home/js/programs/sthom/model.stan', line 73, column 19 to line 75, column 5)",
 " (in '/home/js/programs/sthom/model.stan', line 73, column 4 to line 75, column 5)",
 " (in '/home/js/programs/sthom/model.stan', line 72, column 2 to line 76, column 3)",
 " (in '/home/js/programs/sthom/model.stan', line 11, column 2 to column 17)",
 " (in '/home/js/programs/sthom/model.stan', line 12, column 2 to column 21)",
 " (in '/home/js/programs/sthom/model.stan', line 13, column 2 to column 24)",
 " (in '/home/js/programs/sthom/model.stan', line 14, column 9 to column 10)",
 " (in '/home/js/programs/sthom/model.stan', line 14, column 12 to column 13)",
 " (in '/home/js/programs/sthom/model.stan', line 14, column 2 to column 25)",
 " (in '/home/js/programs/sthom/model.stan', line 15, column 13 to column 14)",
 " (in '/home/js/programs/sthom/model.stan', line 15, column 16 to column 21)",
 " (in '/home/js/programs/sthom/model.stan', line 15, column 2 to column 23)",
 " (in '/home/js/programs/sthom/model.stan', line 16, column 19 to column 20)",
 " (in '/home/js/programs/sthom/model.stan', line 16, column 22 to column 27)",
 " (in '/home/js/programs/sthom/model.stan', line 16, column 2 to column 29)",
 " (in '/home/js/programs/sthom/model.stan', line 20, column 9 to column 10)",
 " (in '/home/js/programs/sthom/model.stan', line 20, column 12 to column 13)",
 " (in '/home/js/programs/sthom/model.stan', line 20, column 2 to column 53)",
 " (in '/home/js/programs/sthom/model.stan', line 21, column 9 to column 10)",
 " (in '/home/js/programs/sthom/model.stan', line 21, column 12 to column 13)",
 " (in '/home/js/programs/sthom/model.stan', line 21, column 2 to column 58)",
 " (in '/home/js/programs/sthom/model.stan', line 22, column 9 to column 10)",
 " (in '/home/js/programs/sthom/model.stan', line 22, column 2 to column 37)",
 " (in '/home/js/programs/sthom/model.stan', line 24, column 2 to column 15)",
 " (in '/home/js/programs/sthom/model.stan', line 25, column 2 to column 15)",
 " (in '/home/js/programs/sthom/model.stan', line 30, column 18 to column 19)",
 " (in '/home/js/programs/sthom/model.stan', line 31, column 26 to column 27)",
 " (in '/home/js/programs/sthom/model.stan', line 32, column 26 to column 27)",
 " (in '/home/js/programs/sthom/model.stan', line 37, column 9 to column 10)",
 " (in '/home/js/programs/sthom/model.stan', line 41, column 26 to column 27)",
 " (in '/home/js/programs/sthom/model.stan', line 42, column 9 to column 10)",
 " (in '/home/js/programs/sthom/model.stan', line 42, column 12 to column 13)",
 " (in '/home/js/programs/sthom/model.stan', line 43, column 22 to column 23)",
 " (in '/home/js/programs/sthom/model.stan', line 43, column 25 to column 30)",
 " (in '/home/js/programs/sthom/model.stan', line 43, column 9 to column 13)",
 " (in '/home/js/programs/sthom/model.stan', line 3, column 4 to column 39)",
 " (in '/home/js/programs/sthom/model.stan', line 4, column 4 to column 54)",
 " (in '/home/js/programs/sthom/model.stan', line 5, column 4 to column 31)",
 " (in '/home/js/programs/sthom/model.stan', line 6, column 4 to column 41)",
 " (in '/home/js/programs/sthom/model.stan', line 2, column 58 to line 7, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>, -1, 1>
sir(const T0__& t, const T1__& y_arg__, const T2__& p_beta,
    const T3__& p_gamma, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__>;
  int current_statement__ = 0; 
  const auto& y = to_ref(y_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ dSdt;
    dSdt = DUMMY_VAR__;
    
    current_statement__ = 60;
    dSdt = ((-p_beta * rvalue(y, "y", index_uni(1))) *
             rvalue(y, "y", index_uni(2)));
    local_scalar_t__ dIdt;
    dIdt = DUMMY_VAR__;
    
    current_statement__ = 61;
    dIdt = (((p_beta * rvalue(y, "y", index_uni(1))) *
              rvalue(y, "y", index_uni(2))) -
             (p_gamma * rvalue(y, "y", index_uni(2))));
    local_scalar_t__ dRdt;
    dRdt = DUMMY_VAR__;
    
    current_statement__ = 62;
    dRdt = (p_gamma * rvalue(y, "y", index_uni(2)));
    current_statement__ = 63;
    return to_vector((Eigen::Matrix<local_scalar_t__,1,-1>(3) << dSdt, dIdt,
             dRdt).finished());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sir_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>, -1, 1>
operator()(const T0__& t, const T1__& y, const T2__& p_beta,
           const T3__& p_gamma, std::ostream* pstream__)  const 
{
return sir(t, y, p_beta, p_gamma, pstream__);
}
};


struct sir_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>, -1, 1>
operator()(const T0__& t, const T1__& y, std::ostream* pstream__,
           const T2__& p_beta, const T3__& p_gamma)  const 
{
return sir(t, y, p_beta, p_gamma, pstream__);
}
};

class model_model final : public model_base_crtp<model_model> {

 private:
  int n;
  int n_obs;
  int n_sample;
  Eigen::Matrix<double, -1, -1> distances__;
  std::vector<std::vector<double>> t_obs;
  std::vector<std::vector<int>> infected_obs;
  Eigen::Matrix<double, -1, -1> distances_sq__;
  Eigen::Matrix<double, -1, -1> jitter__;
  Eigen::Matrix<double, -1, 1> zeros__;
  int n_eq;
  double t0; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> distances{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> distances_sq{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> jitter{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> zeros{nullptr, 0};
 
 public:
  ~model_model() { }
  
  inline std::string model_name() const final { return "model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  model_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 28;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 28;
      check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization","n_obs","int",
           std::vector<size_t>{});
      n_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 29;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 29;
      check_greater_or_equal(function__, "n_obs", n_obs, 1);
      current_statement__ = 30;
      context__.validate_dims("data initialization","n_sample","int",
           std::vector<size_t>{});
      n_sample = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      n_sample = context__.vals_i("n_sample")[(1 - 1)];
      current_statement__ = 30;
      check_greater_or_equal(function__, "n_sample", n_sample, 1);
      current_statement__ = 31;
      validate_non_negative_index("distances", "n", n);
      current_statement__ = 32;
      validate_non_negative_index("distances", "n", n);
      current_statement__ = 33;
      context__.validate_dims("data initialization","distances","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(n)});
      distances__ = Eigen::Matrix<double, -1, -1>(n, n);
      new (&distances) Eigen::Map<Eigen::Matrix<double, -1, -1>>(distances__.data(), n, n);
      
      
      {
        std::vector<local_scalar_t__> distances_flat__;
        current_statement__ = 33;
        distances_flat__ = context__.vals_r("distances");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 33;
            assign(distances, distances_flat__[(pos__ - 1)],
              "assigning variable distances", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 33;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      validate_non_negative_index("t_obs", "n", n);
      current_statement__ = 35;
      validate_non_negative_index("t_obs", "n_obs", n_obs);
      current_statement__ = 36;
      context__.validate_dims("data initialization","t_obs","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(n_obs)});
      t_obs = std::vector<std::vector<double>>(n, std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> t_obs_flat__;
        current_statement__ = 36;
        t_obs_flat__ = context__.vals_r("t_obs");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 36;
            assign(t_obs, t_obs_flat__[(pos__ - 1)],
              "assigning variable t_obs", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 36;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      validate_non_negative_index("infected_obs", "n", n);
      current_statement__ = 38;
      validate_non_negative_index("infected_obs", "n_obs", n_obs);
      current_statement__ = 39;
      context__.validate_dims("data initialization","infected_obs","int",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(n_obs)});
      infected_obs = std::vector<std::vector<int>>(n, std::vector<int>(n_obs, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> infected_obs_flat__;
        current_statement__ = 39;
        infected_obs_flat__ = context__.vals_i("infected_obs");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
          current_statement__ = 39;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 39;
            assign(infected_obs, infected_obs_flat__[(pos__ - 1)],
              "assigning variable infected_obs", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 39;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 40;
      validate_non_negative_index("distances_sq", "n", n);
      current_statement__ = 41;
      validate_non_negative_index("distances_sq", "n", n);
      current_statement__ = 42;
      distances_sq__ = Eigen::Matrix<double, -1, -1>(n, n);
      new (&distances_sq) Eigen::Map<Eigen::Matrix<double, -1, -1>>(distances_sq__.data(), n, n);
      stan::math::fill(distances_sq, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 42;
      assign(distances_sq, elt_multiply(distances, distances),
        "assigning variable distances_sq");
      current_statement__ = 43;
      validate_non_negative_index("jitter", "n", n);
      current_statement__ = 44;
      validate_non_negative_index("jitter", "n", n);
      current_statement__ = 45;
      jitter__ = Eigen::Matrix<double, -1, -1>(n, n);
      new (&jitter) Eigen::Map<Eigen::Matrix<double, -1, -1>>(jitter__.data(), n, n);
      stan::math::fill(jitter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 45;
      assign(jitter, diag_matrix(rep_vector(0.001, n)),
        "assigning variable jitter");
      current_statement__ = 46;
      validate_non_negative_index("zeros", "n", n);
      current_statement__ = 47;
      zeros__ = Eigen::Matrix<double, -1, 1>(n);
      new (&zeros) Eigen::Map<Eigen::Matrix<double, -1, 1>>(zeros__.data(), n);
      stan::math::fill(zeros, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 47;
      assign(zeros, rep_vector(0, n), "assigning variable zeros");
      current_statement__ = 48;
      n_eq = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      n_eq = 3;
      current_statement__ = 49;
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      t0 = 0.;
      current_statement__ = 50;
      validate_non_negative_index("betas", "n", n);
      current_statement__ = 51;
      validate_non_negative_index("gammas", "n", n);
      current_statement__ = 52;
      validate_non_negative_index("initial_infections", "n", n);
      current_statement__ = 53;
      validate_non_negative_index("k", "n", n);
      current_statement__ = 54;
      validate_non_negative_index("initial_susceptible", "n", n);
      current_statement__ = 55;
      validate_non_negative_index("K", "n", n);
      current_statement__ = 56;
      validate_non_negative_index("K", "n", n);
      current_statement__ = 57;
      validate_non_negative_index("y_pred", "n", n);
      current_statement__ = 58;
      validate_non_negative_index("y_pred", "n_obs", n_obs);
      current_statement__ = 59;
      validate_non_negative_index("y_pred", "n_eq", n_eq);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = n + n + n + 1 + 1 + n;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> betas;
      betas = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(betas, DUMMY_VAR__);
      
      current_statement__ = 1;
      betas = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, n);
      Eigen::Matrix<local_scalar_t__, -1, 1> gammas;
      gammas = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(gammas, DUMMY_VAR__);
      
      current_statement__ = 2;
      gammas = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, 1, lp__, n);
      Eigen::Matrix<local_scalar_t__, -1, 1> initial_infections;
      initial_infections = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(initial_infections, DUMMY_VAR__);
      
      current_statement__ = 3;
      initial_infections = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                             0, 1, lp__, n);
      local_scalar_t__ eta_sq;
      eta_sq = DUMMY_VAR__;
      
      current_statement__ = 4;
      eta_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ rho_sq;
      rho_sq = DUMMY_VAR__;
      
      current_statement__ = 5;
      rho_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> k;
      k = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(k, DUMMY_VAR__);
      
      current_statement__ = 6;
      k = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n);
      Eigen::Matrix<local_scalar_t__, -1, 1> initial_susceptible;
      initial_susceptible = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(initial_susceptible, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(initial_susceptible, subtract(1., initial_infections),
        "assigning variable initial_susceptible");
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n);
      stan::math::fill(K, DUMMY_VAR__);
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y_pred;
      y_pred = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(n, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_obs, Eigen::Matrix<local_scalar_t__, -1, 1>(n_eq)));
      stan::math::fill(y_pred, DUMMY_VAR__);
      
      current_statement__ = 11;
      {
        profile<local_scalar_t__> profile__("kernel", const_cast<profile_map&>(profiles__));
        
        current_statement__ = 10;
        assign(K,
          add(
            multiply(eta_sq,
              stan::math::exp(multiply(-rho_sq, distances_sq))), jitter),
          "assigning variable K");
      }
      current_statement__ = 16;
      {
        profile<local_scalar_t__> profile__("ode", const_cast<profile_map&>(profiles__));
        
        current_statement__ = 15;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 12;
          assign(y_pred,
            ode_rk45(sir_odefunctor__(),
              (Eigen::Matrix<local_scalar_t__,-1,1>(3) <<
              rvalue(initial_susceptible, "initial_susceptible",
                index_uni(i)),
              rvalue(initial_infections, "initial_infections", index_uni(i)),
              0.).finished(), t0, rvalue(t_obs, "t_obs", index_uni(i)),
              pstream__, rvalue(betas, "betas", index_uni(i)),
              rvalue(gammas, "gammas", index_uni(i))),
            "assigning variable y_pred", index_uni(i));
          current_statement__ = 13;
          if (pstream__) {
            stan_print(pstream__, rvalue(y_pred, "y_pred",
                                    index_uni(i), index_omni(), index_uni(2)));
            stan_print(pstream__, "\n");
          }
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 7;
        check_greater_or_equal(function__, "initial_susceptible[sym1__]",
                               initial_susceptible[(sym1__ - 1)], 0);
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 7;
        check_less_or_equal(function__, "initial_susceptible[sym1__]",
                            initial_susceptible[(sym1__ - 1)], 1);
      }
      {
        current_statement__ = 23;
        {
          profile<local_scalar_t__> profile__("priors", const_cast<profile_map&>(profiles__));
          
          current_statement__ = 17;
          lp_accum__.add(exponential_lpdf<propto__>(eta_sq, 0.5));
          current_statement__ = 18;
          lp_accum__.add(exponential_lpdf<propto__>(rho_sq, 2));
          current_statement__ = 19;
          lp_accum__.add(exponential_lpdf<propto__>(betas, 0.75));
          current_statement__ = 20;
          lp_accum__.add(beta_lpdf<propto__>(gammas, 1., 20.));
          current_statement__ = 21;
          lp_accum__.add(multi_normal_lpdf<propto__>(k, zeros, K));
          current_statement__ = 22;
          lp_accum__.add(beta_lpdf<propto__>(initial_infections, 1, 10));
        }
        current_statement__ = 27;
        {
          profile<local_scalar_t__> profile__("likelihood", const_cast<profile_map&>(profiles__));
          
          current_statement__ = 26;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 24;
            lp_accum__.add(
              binomial_lpmf<propto__>(
                rvalue(infected_obs, "infected_obs", index_uni(i)), n_sample,
                to_vector(
                  rvalue(y_pred, "y_pred",
                    index_uni(i), index_omni(), index_uni(2)))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> betas;
      betas = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(betas, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      betas = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, n);
      Eigen::Matrix<double, -1, 1> gammas;
      gammas = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      gammas = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, 1, lp__, n);
      Eigen::Matrix<double, -1, 1> initial_infections;
      initial_infections = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(initial_infections, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      initial_infections = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                             0, 1, lp__, n);
      double eta_sq;
      eta_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      eta_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double rho_sq;
      rho_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      Eigen::Matrix<double, -1, 1> k;
      k = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(k, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      k = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n);
      Eigen::Matrix<double, -1, 1> initial_susceptible;
      initial_susceptible = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(initial_susceptible, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> K;
      K = Eigen::Matrix<double, -1, -1>(n, n);
      stan::math::fill(K, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y_pred;
      y_pred = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n, std::vector<Eigen::Matrix<double, -1, 1>>(n_obs, Eigen::Matrix<double, -1, 1>(n_eq)));
      stan::math::fill(y_pred, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(betas[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(initial_infections[(sym1__ - 1)]);
      }
      vars__.emplace_back(eta_sq);
      vars__.emplace_back(rho_sq);
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(k[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(initial_susceptible, subtract(1., initial_infections),
        "assigning variable initial_susceptible");
      current_statement__ = 11;
      {
        profile<local_scalar_t__> profile__("kernel", const_cast<profile_map&>(profiles__));
        
        current_statement__ = 10;
        assign(K,
          add(
            multiply(eta_sq,
              stan::math::exp(multiply(-rho_sq, distances_sq))), jitter),
          "assigning variable K");
      }
      current_statement__ = 16;
      {
        profile<local_scalar_t__> profile__("ode", const_cast<profile_map&>(profiles__));
        
        current_statement__ = 15;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 12;
          assign(y_pred,
            ode_rk45(sir_odefunctor__(),
              (Eigen::Matrix<local_scalar_t__,-1,1>(3) <<
              rvalue(initial_susceptible, "initial_susceptible",
                index_uni(i)),
              rvalue(initial_infections, "initial_infections", index_uni(i)),
              0.).finished(), t0, rvalue(t_obs, "t_obs", index_uni(i)),
              pstream__, rvalue(betas, "betas", index_uni(i)),
              rvalue(gammas, "gammas", index_uni(i))),
            "assigning variable y_pred", index_uni(i));
          current_statement__ = 13;
          if (pstream__) {
            stan_print(pstream__, rvalue(y_pred, "y_pred",
                                    index_uni(i), index_omni(), index_uni(2)));
            stan_print(pstream__, "\n");
          }
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 7;
        check_greater_or_equal(function__, "initial_susceptible[sym1__]",
                               initial_susceptible[(sym1__ - 1)], 0);
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 7;
        check_less_or_equal(function__, "initial_susceptible[sym1__]",
                            initial_susceptible[(sym1__ - 1)], 1);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          vars__.emplace_back(initial_susceptible[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            vars__.emplace_back(
              rvalue(K, "K", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              vars__.emplace_back(
                y_pred[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> betas;
      betas = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(betas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> betas_flat__;
        current_statement__ = 1;
        betas_flat__ = context__.vals_r("betas");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 1;
          assign(betas, betas_flat__[(pos__ - 1)],
            "assigning variable betas", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> betas_free__;
      betas_free__ = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(betas_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 1;
        assign(betas_free__, stan::math::lb_free(betas[(sym1__ - 1)], 0),
          "assigning variable betas_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> gammas;
      gammas = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gammas_flat__;
        current_statement__ = 2;
        gammas_flat__ = context__.vals_r("gammas");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 2;
          assign(gammas, gammas_flat__[(pos__ - 1)],
            "assigning variable gammas", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> gammas_free__;
      gammas_free__ = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(gammas_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 2;
        assign(gammas_free__,
          stan::math::lub_free(gammas[(sym1__ - 1)], 0, 1),
          "assigning variable gammas_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> initial_infections;
      initial_infections = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(initial_infections, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> initial_infections_flat__;
        current_statement__ = 3;
        initial_infections_flat__ = context__.vals_r("initial_infections");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 3;
          assign(initial_infections, initial_infections_flat__[(pos__ - 1)],
            "assigning variable initial_infections", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> initial_infections_free__;
      initial_infections_free__ = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(initial_infections_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 3;
        assign(initial_infections_free__,
          stan::math::lub_free(initial_infections[(sym1__ - 1)], 0, 1),
          "assigning variable initial_infections_free__", index_uni(sym1__));
      }
      double eta_sq;
      eta_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      eta_sq = context__.vals_r("eta_sq")[(1 - 1)];
      double eta_sq_free__;
      eta_sq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      eta_sq_free__ = stan::math::lb_free(eta_sq, 0);
      double rho_sq;
      rho_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_sq = context__.vals_r("rho_sq")[(1 - 1)];
      double rho_sq_free__;
      rho_sq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_sq_free__ = stan::math::lb_free(rho_sq, 0);
      Eigen::Matrix<double, -1, 1> k;
      k = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(k, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> k_flat__;
        current_statement__ = 6;
        k_flat__ = context__.vals_r("k");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 6;
          assign(k, k_flat__[(pos__ - 1)],
            "assigning variable k", index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(betas_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(gammas_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(initial_infections_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(eta_sq_free__);
      vars__.emplace_back(rho_sq_free__);
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(k[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"betas", "gammas",
      "initial_infections", "eta_sq", "rho_sq", "k", "initial_susceptible",
      "K", "y_pred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(n)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(n_obs),
                          static_cast<size_t>(n_eq)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "initial_infections" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "eta_sq");
    param_names__.emplace_back(std::string() + "rho_sq");
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_susceptible" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "betas" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "initial_infections" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "eta_sq");
    param_names__.emplace_back(std::string() + "rho_sq");
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "initial_susceptible" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"initial_infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"eta_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"initial_susceptible\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"betas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"initial_infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"eta_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"initial_susceptible\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = model_model_namespace::model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_model_namespace::profiles__;
}

#endif


